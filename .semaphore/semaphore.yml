# Use the latest stable version of Semaphore 2.0 YML syntax:
version: v1.0

# Name your pipeline. In case you connect multiple pipelines with promotions,
# the name will help you differentiate between, for example, a CI build phase
# and delivery phases.
name: MyNews App Semaphore Pipeline

# An agent defines the environment in which your code runs.
# It is a combination of one of available machine types and operating
# system images.
# See https://docs.semaphoreci.com/ci-cd-environment/machine-types/
# and https://docs.semaphoreci.com/ci-cd-environment/ubuntu-18.04-image/
agent:
  machine:
    type: e1-standard-2
    os_image: ubuntu1804

# https://docs.semaphoreci.com/reference/pipeline-yaml-reference/#global_job_config
global_job_config:
  env_vars:
    - name: REQUIREMENTS_FILE
      value: requirements_production.txt
    - name: DJANGO_SECRET_KEY
      value: 5!xnz8s(8sdyzhtq9paveh+zsis^gfe$7c%-h)5iee0e%tpurz
    - name: DATABASE_NAME
      value: mysql
    - name: DATABASE_USER
      value: root
    - name: DATABASE_PASSWORD
      value: ""
    - name: DATABASE_HOST
      value: 0.0.0.0

# Blocks are the heart of a pipeline and are executed sequentially.
# Each block has a task that defines one or more jobs. Jobs define the
# commands to execute.
# See https://docs.semaphoreci.com/essentials/concepts/
blocks:
  - name: "Install Dependencies"
    task:
      # This block installs all the python dependencies,
      # as well as all the required Linux packages.
      # The prologue section is always executed before each job on
      # the block.
      # See https://docs.semaphoreci.com/reference/pipeline-yaml-reference/#prologue
      prologue:
        commands:
          # Set the python version.
          # See https://docs.semaphoreci.com/ci-cd-environment/sem-service-managing-databases-and-services-on-linux/
          - sem-version python 3.7
          # Install Linux dependencies.
          - sudo apt-get update && sudo apt-get install -y python3-dev && sudo apt-get install default-libmysqlclient-dev
      jobs:
        - name: pip
          commands:
            # Get the latest version of our source code from GitHub:
            # See https://docs.semaphoreci.com/reference/toolbox-reference/#checkout
            - checkout
            # Restore dependencies from cache. This command will not fail in
            # case of a cache miss. In case of a cache hit, pip can use it
            # to speed up the installation.
            # For more info on caching, see https://docs.semaphoreci.com/essentials/caching-dependencies-and-directories/
            - cache restore
            # Install python dependencies.
            # If not found in the cache, pip will download them.
            - pip download --cache-dir .pip_cache -r ${REQUIREMENTS_FILE}
            # Persist downloaded packages for future jobs.
            - cache store

  # - name: "Run Code Analysis"
  #   task:
  #     # This block executes code analysis tests with pylint.
  #     prologue:
  #       commands:
  #         - sem-version python 3.7
  #         - checkout
  #         # At this point, the cache contains the downloaded packages ...
  #         - cache restore
  #         # ... so pip does the installation much faster.
  #         - pip install -r ${REQUIREMENTS_FILE} --cache-dir .pip_cache
  #     jobs:
  #       - name: Pylint
  #         commands:
  #           # list out files that are in directory and working tree
  #           # grep -v will exclude the files being considered for pylint
  #           # grep -E will matches files having .py extension
  #           # This command will help to pass required python files to pylint along with pylint_djanog plugin
  #           # Pylint with -E option will display only if there is any error
  #           - git ls-files | grep -v 'migrations' | grep -v 'settings.py' | grep -v 'manage.py' | grep -E '.py$' |
  #             xargs pylint -E --load-plugins=pylint_django

  - name: "Run Unit Tests"
    task:
      # This block runs the unit tests.
      # Since the test require a database, we start the database here.
      # Django automatically creates a test database schema.
      prologue:
        commands:
          - sem-version python 3.7
          # Start a MySQL database. On Semaphore, databases run in the same
          # environment as your code.
          # See https://docs.semaphoreci.com/ci-cd-environment/ubuntu-18.04-image/#databases-and-services
          # Also https://docs.semaphoreci.com/reference/toolbox-reference/#sem-service
          - sem-service start mysql
          - checkout 
          - cache restore 
          - pip install -r ${REQUIREMENTS_FILE} --cache-dir .pip_cache
      # Two parallel test jobs are executed.
      jobs:
        - name: Comments Test
          commands:
            # Test the application's database models.
            - python manage.py test comments.tests
        - name: NewsApp Test
          commands:
            # Test the application's views.
            - python manage.py test my_newsapp.tests

  # - name: "Run Browser Tests"
  #   task:
  #     # This block runs browser-based tests.
  #     # We need to set environment variables.
  #     # See https://docs.semaphoreci.com/essentials/environment-variables/
  #     env_vars:
  #       - name: DB_NAME
  #         value: 'pydjango'
  #     # This test requires the application to be running.
  #     # We start the application server here.
  #     prologue:
  #       commands:
  #         - sem-version python 3.7
  #         # Start MySQL database.
  #         - sem-service start mysql
  #         # Install mysql client
  #         - sudo apt-get install -y -qq mysql-client
  #         # Create an empty database.
  #         # We can connect to the db with root and a blank password.
  #         - mysql --host=0.0.0.0 -uroot -e "create database $DB_NAME"
  #         - checkout
  #         - cache restore
  #         - pip install -r ${REQUIREMENTS_FILE} --cache-dir .pip_cache
  #         # Application is started.
  #         - nohup python manage.py runserver &
  #     jobs:
  #       - name: Browser Test
  #         commands:
  #           # Run browser tests on Google Chrome.
  #           # On Semaphore, browsers are already installed.
  #           - python manage.py test tasks.tests.test_browser


  # - name: "Run Security Tests"
  #   task:
  #     # This block runs through the security checklist for the project.
  #     jobs:
  #       - name: Deployment Checklist
  #         commands:
  #          - checkout
  #          - sem-version python 3.7
  #          - cache restore
  #          - pip install -r ${REQUIREMENTS_FILE} --cache-dir .pip_cache
  #          # Test if project can be deployed securely.
  #          - python manage.py check --deploy --fail-level ERROR